A = inla.spde.make.A(mesh = mesh, loc = as.matrix(depth[,c(1,2)]))
ggplot() + geom_sf(data = poly) +
gg(mesh) + theme_map
# simulate point process -------------------------------------------------
RFoptions(seed=67356453)
# create the intensity function
# linear part
beta0 = -4
beta_depth = -1
lambda = beta0 + beta_depth * depth$z
im = as.im(data.frame(x = depth$x, y = depth$y, z = lambda), W = win)
# parameters for the Gaussian field
sigma2x <- .5^2
range <- 100
# Simulate the sightings process
data <- rLGCP(model="matern",
mu=im,
var=sigma2x,
scale=range/sqrt(8),
nu=1,
win = win,
saveLambda = TRUE)
data.sp <- SpatialPoints(cbind(data$x,data$y),
proj4string = CRS(my_crs))
# Save the intensity surface for later reference
Lambda = raster::raster(attributes(data)$Lambda)
r1 = raster::mask(Lambda, poly)
r2 = raster::crop(r1, poly)
r3 <- raster::rasterToPoints(r2, spatial = TRUE, proj4string = CRS(my_crs))
p1 = ggplot() + gg(r3, aes(color = layer)) + scale_color_scico() +
theme_map + geom_sf(data = poly, alpha = 0) + theme(legend.position = "none") +
geom_point(data = data.frame(x = data$x, y = data$y), aes(x,y))
p2 = ggplot() + gg(int_social_sp) + theme_map + scale_fill_scico() + theme(legend.position = "none") +
geom_sf(data = poly, alpha = 0)
p1 + p2
scale_detect1 = 0.5
location_detect1 = 0
sig_detect2 = 2
# function to compute the distance between a point in space and the nearest ferry track
surf2 = function(x,y)
{
d = SpatialPoints(cbind(x,y),
proj4string = CRS(my_crs))
d1 = rgeos::gDistance(d, ferry_sp, byid=TRUE)
z = apply(d1,2,min)
return(z)
}
# thinning the data points
# complete dataset
all_data = data.frame(x = data$x,
y = data$y)
# dataset from SM observation process
data1 = all_data %>%
mutate(surf = f.fill(x,y,int_social_sp)) %>%
mutate(pdetect = pnorm(surf, mean = location_detect1, sd = scale_detect1)) %>%
mutate(u = runif(data$n)) %>%
mutate(detect = u<pdetect) %>%
dplyr::filter(detect)
# dataset from ferry observation process
data2 = all_data %>%
mutate(surf = surf2(x,y)) %>%
mutate(pdetect = exp(-0.5*(surf/ sig_detect2)^2),
u = runif(data$n)) %>%
mutate(detect = u<pdetect) %>%
dplyr::filter(detect)
p1 = ggplot() + geom_point(data = all_data, aes(x,y), alpha = 0.2) +
geom_point(data = data1, aes(x,y)) +
geom_sf(data = poly, alpha = 0) +
ggtitle("SM Data ") + theme_map
p2 = ggplot() + geom_point(data = all_data, aes(x,y), alpha = 0.2) +
gg(ferry_sp) +
geom_point(data = data2, aes(x,y))+
geom_sf(data = poly, alpha = 0) +
ggtitle("Ferry Data ")+ theme_map
p1 + p2
# create the datasets as SP and all maps as SPDF --------------------------
data1_sp = SpatialPointsDataFrame(cbind(x = data1$x, y = data1$y),
data = data.frame(d = rep(1,length(data1$x))),
proj4string = CRS(my_crs))
data2_sp = SpatialPointsDataFrame(cbind(x = data2$x, y = data2$y),
data = data.frame(d = rep(1,length(data2$x))),
proj4string =CRS(my_crs))
# we need to add the distance from the ferry track for the ferry data
d1 = rgeos::gDistance(data2_sp, ferry_sp, byid=TRUE)
d1 = apply(d1,2,min)
data2_sp$dist_obs = d1
# Create the SPDE model
matern <-  inla.spde2.pcmatern(mesh,
prior.sigma = c(.7, 0.01),
prior.range = c(100, 0.5))
# Transformation function the the \xi paramters
qexppnorm <- function(x, rate) {
qexp(pnorm(x, lower.tail = FALSE, log.p = TRUE),
rate = rate,
log.p = TRUE,
lower.tail = FALSE)
}
# Define the two detection functions --------------------------------------
log_detect_social = function(x,y, t1, t2)
{
dens = f.fill(x,y,int_social_sp)
pnorm(dens/qexppnorm(t1, rate = rate_detect1) +
t2,
log.p = TRUE)
}
log_detect_ferry = function(dist, sig)
{
-0.5*(dist/ sig)^2
}
# Define the model components
cmp = ~
SPDE(main = coordinates, model = matern) +
depth(depth_SPDF) +
Intercept(1)+
sig_detect2(main = 1, model = "linear",
mean.linear = 0,
prec.linear = 1) +
scale_detect1(1,
mean.linear = 0,
prec.linear = 1)+
location_detect1(1,
mean.linear = 0,
prec.linear = 10)
# Define the formula for the two observed processes
formula_data1 = coordinates   ~
Intercept +
depth  +
SPDE +
log_detect_social(x,y,location_detect1, scale_detect1)
formula_data2 = coordinates + dist_obs   ~
Intercept +
depth  +
SPDE +
log_detect_ferry(dist_obs,qexppnorm(sig_detect2,rate =rate_detect2))
# Define the likelihood for the two observed processes
lik_data1 <- like("cp",
formula = formula_data1,
samplers = as(poly, "Spatial"),
domain = list(coordinates = mesh),
data = data1_sp)
lik_data2 <- like("cp",
formula = formula_data2,
samplers = ferry_sp,
domain = list(coordinates = mesh,
dist_obs = inla.mesh.1d(seq(0, 7, length.out = 5),
degree = 1)),
data = data2_sp)
# Finally set things together and run the model
bru_options_set(bru_verbose = 1)
fit <- bru(components = cmp,
lik_data1,
lik_data2,
options = list(verbose = F,
num.threads = "1:1"))
rate_detect1 = 1
rate_detect2 = 0.5
# Create the SPDE model
matern <-  inla.spde2.pcmatern(mesh,
prior.sigma = c(.7, 0.01),
prior.range = c(100, 0.5))
# Transformation function the the \xi paramters
qexppnorm <- function(x, rate) {
qexp(pnorm(x, lower.tail = FALSE, log.p = TRUE),
rate = rate,
log.p = TRUE,
lower.tail = FALSE)
}
# Define the two detection functions --------------------------------------
log_detect_social = function(x,y, t1, t2)
{
dens = f.fill(x,y,int_social_sp)
pnorm(dens/qexppnorm(t1, rate = rate_detect1) +
t2,
log.p = TRUE)
}
log_detect_ferry = function(dist, sig)
{
-0.5*(dist/ sig)^2
}
# Define the model components
cmp = ~
SPDE(main = coordinates, model = matern) +
depth(depth_SPDF) +
Intercept(1)+
sig_detect2(main = 1, model = "linear",
mean.linear = 0,
prec.linear = 1) +
scale_detect1(1,
mean.linear = 0,
prec.linear = 1)+
location_detect1(1,
mean.linear = 0,
prec.linear = 10)
# Define the formula for the two observed processes
formula_data1 = coordinates   ~
Intercept +
depth  +
SPDE +
log_detect_social(x,y,location_detect1, scale_detect1)
formula_data2 = coordinates + dist_obs   ~
Intercept +
depth  +
SPDE +
log_detect_ferry(dist_obs,qexppnorm(sig_detect2,rate =rate_detect2))
# Define the likelihood for the two observed processes
lik_data1 <- like("cp",
formula = formula_data1,
samplers = as(poly, "Spatial"),
domain = list(coordinates = mesh),
data = data1_sp)
lik_data2 <- like("cp",
formula = formula_data2,
samplers = ferry_sp,
domain = list(coordinates = mesh,
dist_obs = inla.mesh.1d(seq(0, 7, length.out = 5),
degree = 1)),
data = data2_sp)
# Finally set things together and run the model
bru_options_set(bru_verbose = 1)
fit <- bru(components = cmp,
lik_data1,
lik_data2,
options = list(verbose = F,
num.threads = "1:1"))
getwd()
setwd("Projects/Delfini/SIMULATIONS/SM-data-merging/code/")
knitr::purl("runme.Rmd")
source('~/Projects/Delfini/SIMULATIONS/SM-data-merging/code/runme.R', echo=TRUE)
source('~/Projects/Delfini/SIMULATIONS/SM-data-merging/code/runme.R', echo=TRUE)
source('~/Projects/Delfini/SIMULATIONS/SM-data-merging/code/runme.R', echo=TRUE)
my_crs
my_crs
poly
crs(boundary)
proj4string(poly_sp)
my_crs
poly = read_sf("shape_interest/shape_interest.shp")
poly_sp = as(poly,"Spatial")
ferry_sp = read_sf("ferry_lines/ferry_lines.shp") %>%
st_set_crs(proj4string(as(poly, "Spatial")))
ferry_sp = as(ferry_sp, "Spatial")
my_crs = "+proj=tmerc +lat_0=0 +lon_0=9 +k=0.9996 +x_0=500000 +y_0=0 +datum=WGS84 +units=km +no_defs"
depth =  read.table("depth.csv")
depth_SPDF = SpatialPixelsDataFrame(points = cbind(depth$x,depth$y),
data = data.frame(depth = depth$z),
proj4string = CRS(my_crs))
int_social = read.table("intensity.dat", header = T)
int_social_sp = SpatialPixelsDataFrame(cbind(x = int_social$x, y = int_social$y),
data = data.frame(cov = int_social$z),
proj4string = CRS(my_crs))
win <- as.owin(poly)
## ----mesh, fig.width = 4, fig.height=  4-----------------------------------
# CREATE THE MESH
boundary = as(st_simplify(poly, dTolerance = 1.3),"Spatial")
max.edge = 10
bound.outer = 50
mesh = inla.mesh.2d(boundary = boundary,
max.edge = c(1,4)*max.edge,
# - use 5 times max.edge in the outer extension/offset/boundary
crs = CRS(my_crs),
offset = c(max.edge, bound.outer))
plot(mesh)
source('~/Projects/Delfini/SIMULATIONS/SM-data-merging/code/runme.R', echo=TRUE)
y = 3
tau_x = 0.01
tau_x = 0.01
full_conditional = function(x, tau_x, log=T, y_obs=y)
{
d = -0.5 * tau_x * x^2 - exp(x) + x*y_obs
if(log) return(d)
else return(exp(d))
}
f_I = function(x, y_obs = y, tau_x)
{
return(- tau_x*x + y_obs - exp(x))
}
f_II  = function(x,  tau_x)
{
return(-tau_x-exp(x))
}
gauss_app = function(x,x0, y_obs =  y, tau_x, log=T)
{
a = full_conditional(x0, y_obs, tau_x) -
f_I(x0, y_obs, tau_x)*x0 + 0.5*f_II(x0,  tau_x)*x0^2
b <- f_I(x0, y_obs, tau_x) - f_II(x0, tau_x)*x0
c <- -f_II(x0, tau_x)
res = exp(-0.5*c*x^2+b*x)
sd = sqrt(1/c)
mean = b/c
return(list(app = res, mean = mean, sd = sd))
}
const1 = integrate(full_conditional,log=F, tau_x=tau_x, lower = -Inf, upper = Inf)$value
mode = optimise(full_conditional, tau_x=tau_x, lower = -10, upper = 10, maximum = T)$maximum
####
x0 = 2
x = seq(-1,4,0.1)
curve(exp(full_conditional(x, tau_x = tau_x))/const1, from = -1, to=4,
lwd=2, col=2, ylab="x", xlab="")
approx= gauss_app(x,x0 = x0, y_obs =  y, tau_x = tau_x, log=T)
curve(dnorm(x, mean = approx$mean, sd = approx$sd), add=T)
points(x0,0, pch = 19, col=2)
points(approx$mean, 0, pch = "*", cex=1.5)
####
x0 = 0
curve(exp(full_conditional(x, tau_x = tau_x))/const1, from = -1, to=4,
lwd=2, col=2, ylab="", xlab="x")
approx= gauss_app(x,x0 = x0, y_obs =  y, tau_x = tau_x, log=T)
curve(dnorm(x, mean = approx$mean, sd = approx$sd), add=T)
points(x0,0, pch = 19, col=2)
points(approx$mean, 0, pch = "*", cex=1.5)
####
x0 = mode
curve(exp(full_conditional(x, tau_x = tau_x))/const1, from = -1, to=4,
lwd=2, col=2, ylab="", xlab="x")
approx= gauss_app(x,x0 = x0, y_obs =  y, tau_x = tau_x, log=T)
curve(dnorm(x, mean = approx$mean, sd = approx$sd), add=T)
points(mode,0, pch = 19, col=2)
points(approx$mean, 0, pch = "*", cex=1.5)
?st_transform
poly = read_sf("shape_interest/shape_interest.shp") %>%
st_transform(crs = my_crs)
# read shapefiles -------------------------------------------
my_crs = "+proj=tmerc +lat_0=0 +lon_0=9 +k=0.9996 +x_0=500000 +y_0=0 +datum=WGS84 +units=km +no_defs"
poly = read_sf("shape_interest/shape_interest.shp") %>%
st_transform(crs = my_crs)
poly_sp = as(poly,"Spatial")
ferry_sp = read_sf("ferry_lines/ferry_lines.shp") %>%
st_set_crs(proj4string(as(poly, "Spatial")))
ferry_sp = as(ferry_sp, "Spatial")
depth =  read.table("depth.csv")
depth =  read.table("depth.csv")
depth_SPDF = SpatialPixelsDataFrame(points = cbind(depth$x,depth$y),
data = data.frame(depth = depth$z),
proj4string = CRS(my_crs))
int_social = read.table("intensity.dat", header = T)
int_social_sp = SpatialPixelsDataFrame(cbind(x = int_social$x, y = int_social$y),
data = data.frame(cov = int_social$z),
proj4string = CRS(my_crs))
win <- as.owin(poly)
## ----mesh, fig.width = 4, fig.height=  4-----------------------------------
# CREATE THE MESH
boundary = as(st_simplify(poly, dTolerance = 1.3),"Spatial")
max.edge = 10
bound.outer = 50
mesh = inla.mesh.2d(boundary = boundary,
max.edge = c(1,4)*max.edge,
# - use 5 times max.edge in the outer extension/offset/boundary
crs = CRS(my_crs),
offset = c(max.edge, bound.outer))
A = inla.spde.make.A(mesh = mesh, loc = as.matrix(depth[,c(1,2)]))
## ----simulate--------------------------------------------------------------
# simulate point process -------------------------------------------------
RFoptions(seed=67356453)
ggplot() + geom_sf(data = poly) +
gg(mesh) + theme_map
# create the intensity function
# linear part
beta0 = -4
beta_depth = -1
lambda = beta0 + beta_depth * depth$z
im = as.im(data.frame(x = depth$x, y = depth$y, z = lambda), W = win)
# parameters for the Gaussian field
sigma2x <- .5^2
range <- 100
# Simulate the sightings process
data <- rLGCP(model="matern",
mu=im,
var=sigma2x,
scale=range/sqrt(8),
nu=1,
win = win,
saveLambda = TRUE)
data.sp <- SpatialPoints(cbind(data$x,data$y),
proj4string = CRS(my_crs))
# Save the intensity surface for later reference
Lambda = raster::raster(attributes(data)$Lambda)
## ----int:plot, fig.width = 7, fig.height= 7, echo = FALSE, fig.cap="Left: observed point process, in the background is the density of the LGCP. Right: density for the SM observation process", echo = FALSE----
r1 = raster::mask(Lambda, poly)
r2 = raster::crop(r1, poly)
r3 <- raster::rasterToPoints(r2, spatial = TRUE, proj4string = CRS(my_crs))
p1 = ggplot() + gg(r3, aes(color = layer)) + scale_color_scico() +
theme_map + geom_sf(data = poly, alpha = 0) + theme(legend.position = "none") +
geom_point(data = data.frame(x = data$x, y = data$y), aes(x,y))
p2 = ggplot() + gg(int_social_sp) + theme_map + scale_fill_scico() + theme(legend.position = "none") +
geom_sf(data = poly, alpha = 0)
p1 + p2
## ----detection_param, echo = FALSE-----------------------------------------
scale_detect1 = 0.5
location_detect1 = 0
sig_detect2 = 2
## ----thinning--------------------------------------------------------------
# function to compute the distance between a point in space and the nearest ferry track
surf2 = function(x,y)
{
d = SpatialPoints(cbind(x,y),
proj4string = CRS(my_crs))
d1 = rgeos::gDistance(d, ferry_sp, byid=TRUE)
z = apply(d1,2,min)
return(z)
}
# complete dataset
all_data = data.frame(x = data$x,
y = data$y)
# dataset from SM observation process
data1 = all_data %>%
mutate(surf = f.fill(x,y,int_social_sp)) %>%
mutate(pdetect = pnorm(surf, mean = location_detect1, sd = scale_detect1)) %>%
mutate(u = runif(data$n)) %>%
mutate(detect = u<pdetect) %>%
dplyr::filter(detect)
# dataset from ferry observation process
data2 = all_data %>%
mutate(surf = surf2(x,y)) %>%
mutate(pdetect = exp(-0.5*(surf/ sig_detect2)^2),
u = runif(data$n)) %>%
mutate(detect = u<pdetect) %>%
dplyr::filter(detect)
## ---- echo = FALSE, fig.width = 6, fig.height=  6--------------------------
p1 = ggplot() + geom_point(data = all_data, aes(x,y), alpha = 0.2) +
geom_point(data = data1, aes(x,y)) +
geom_sf(data = poly, alpha = 0) +
ggtitle("SM Data ") + theme_map
p2 = ggplot() + geom_point(data = all_data, aes(x,y), alpha = 0.2) +
gg(ferry_sp) +
geom_point(data = data2, aes(x,y))+
geom_sf(data = poly, alpha = 0) +
ggtitle("Ferry Data ")+ theme_map
p1 + p2
## --------------------------------------------------------------------------
# create the datasets as SP and all maps as SPDF --------------------------
data1_sp = SpatialPointsDataFrame(cbind(x = data1$x, y = data1$y),
data = data.frame(d = rep(1,length(data1$x))),
proj4string = CRS(my_crs))
data2_sp = SpatialPointsDataFrame(cbind(x = data2$x, y = data2$y),
data = data.frame(d = rep(1,length(data2$x))),
proj4string =CRS(my_crs))
# we need to add the distance from the ferry track for the ferry data
d1 = rgeos::gDistance(data2_sp, ferry_sp, byid=TRUE)
d1 = apply(d1,2,min)
data2_sp$dist_obs = d1
## ----prior0, echo = F------------------------------------------------------
rate_detect1 = 1
rate_detect2 = 0.5
## ----priors----------------------------------------------------------------
# Create the SPDE model
matern <-  inla.spde2.pcmatern(mesh,
prior.sigma = c(.7, 0.01),
prior.range = c(100, 0.5))
# Transformation function the the \xi paramters
qexppnorm <- function(x, rate) {
qexp(pnorm(x, lower.tail = FALSE, log.p = TRUE),
rate = rate,
log.p = TRUE,
lower.tail = FALSE)
}
# Define the two detection functions --------------------------------------
log_detect_social = function(x,y, t1, t2)
{
dens = f.fill(x,y,int_social_sp)
pnorm(dens/qexppnorm(t1, rate = rate_detect1) +
t2,
log.p = TRUE)
}
log_detect_ferry = function(dist, sig)
{
-0.5*(dist/ sig)^2
}
cmp = ~
SPDE(main = coordinates, model = matern) +
depth(depth_SPDF) +
Intercept(1)+
sig_detect2(main = 1, model = "linear",
mean.linear = 0,
prec.linear = 1) +
scale_detect1(1,
mean.linear = 0,
prec.linear = 1)+
location_detect1(1,
mean.linear = 0,
prec.linear = 10)
# Define the formula for the two observed processes
formula_data1 = coordinates   ~
Intercept +
depth  +
SPDE +
log_detect_social(x,y,location_detect1, scale_detect1)
formula_data2 = coordinates + dist_obs   ~
Intercept +
depth  +
SPDE +
log_detect_ferry(dist_obs,qexppnorm(sig_detect2,rate =rate_detect2))
# Define the likelihood for the two observed processes
lik_data1 <- like("cp",
formula = formula_data1,
samplers = as(poly, "Spatial"),
domain = list(coordinates = mesh),
data = data1_sp)
# Finally set things together and run the model
bru_options_set(bru_verbose = 1)
lik_data2 <- like("cp",
formula = formula_data2,
samplers = ferry_sp,
domain = list(coordinates = mesh,
dist_obs = inla.mesh.1d(seq(0, 7, length.out = 5),
degree = 1)),
data = data2_sp)
fit <- bru(components = cmp,
lik_data1,
lik_data2,
options = list(verbose = F,
num.threads = "1:1"))
knitr::purl("runme.Rmd")
